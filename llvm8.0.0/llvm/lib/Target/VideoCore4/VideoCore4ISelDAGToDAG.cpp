//==-- VideoCore4ISelDAGToDAG.cpp - A dag to dag inst selector for VideoCore4 --==//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the VideoCore4 target.
//
//===----------------------------------------------------------------------===//

#include "VideoCore4.h"
#include "VideoCore4TargetMachine.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Target/TargetLowering.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "vc4-isel"



/// VideoCore4DAGToDAGISel - VideoCore4 specific code to select VideoCore4 machine
/// instructions for SelectionDAG operations.
///
namespace {
  class VideoCore4DAGToDAGISel : public SelectionDAGISel {
    const VideoCore4TargetLowering &Lowering;
    const VideoCore4Subtarget &Subtarget;

  public:
    VideoCore4DAGToDAGISel(VideoCore4TargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel),
        Lowering(*TM.getTargetLowering()),
        Subtarget(*TM.getSubtargetImpl()) { }

    virtual const char *getPassName() const {
      return "VideoCore4 DAG->DAG Pattern Instruction Selection";
    }

    /// getI16Imm - Return a target constant with the specified value, of type
    /// i16.
    inline SDValue getI16Imm(uint64_t Imm) {
      return CurDAG->getTargetConstant(Imm, MVT::i16);
    }

    /// getI32Imm - Return a target constant with the specified value, of type
    /// i32.
    inline SDValue getI32Imm(uint64_t Imm) {
      return CurDAG->getTargetConstant(Imm, MVT::i32);
    }
    
		bool SelectStacked(SDValue N, SDValue& R1, SDValue& R2);

	// Complex pattern selectiors.
	//bool SelectAddr(SDValue N, SDValue& R1);

    // Include the pieces autogenerated from the target description.
    #include "VideoCore4GenDAGISel.inc"

  private:
    SDNode *Select(SDNode *N);
  };
}  // end anonymous namespace

/// createVideoCore4ISelDag - This pass converts a legalized DAG into a
/// VideoCore4-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createVideoCore4ISelDag(VideoCore4TargetMachine &TM,
                                          CodeGenOpt::Level OptLevel) {
  return new VideoCore4DAGToDAGISel(TM, OptLevel);
}

SDNode *VideoCore4DAGToDAGISel::Select(SDNode *N) {
  SDLoc dl(N);

  // Dump information about the Node being selected
  DEBUG(errs() << "Selecting: ");
  DEBUG(N->dump(CurDAG));
  DEBUG(errs() << "\n");

  // If we have a custom node, we already have selected!
  if (N->isMachineOpcode()) {
    DEBUG(errs() << "== ";
          N->dump(CurDAG);
          errs() << "\n");
		N->setNodeId(-1);
    return NULL;
  }

	switch (N->getOpcode()) {
    case ISD::FrameIndex: {
      int FI = cast<FrameIndexSDNode>(N)->getIndex();
      EVT VT = N->getValueType(0);

      assert(VT == MVT::i32);

      SDValue TFI = CurDAG->getTargetFrameIndex(FI, VT);
      unsigned Opc = VideoCore4::ADD_R_RRI;

      SDNode* res;
      if (N->hasOneUse()) {
        res = CurDAG->SelectNodeTo(N, Opc, VT, TFI, CurDAG->getTargetConstant(0, MVT::i32));
      }
      else {
        res = CurDAG->getMachineNode(Opc, dl, VT, TFI, CurDAG->getRegister(VideoCore4::SP, MVT::i32));
      }
      return res;
    }
    case ISD::BRCOND: {
      SDValue Chain = N->getOperand(0);
      SDValue SetCC = N->getOperand(1);
      SDValue Dest = N->getOperand(2);
      SDValue TestAgainst = SetCC.getOperand(1);

      ISD::CondCode CC = cast<CondCodeSDNode>(SetCC.getOperand(2))->get();
      unsigned Opc;

      if (ConstantSDNode *CSN = dyn_cast<ConstantSDNode>(TestAgainst)) {
        Opc = VideoCore4::CMP_LI;
        TestAgainst = getI32Imm( CSN->getZExtValue() );
      }
      else {
        Opc = VideoCore4::CMP_F;
      }

      SDValue Glue = SDValue(CurDAG->getMachineNode(Opc, dl, MVT::Glue,
        SetCC.getOperand(0), TestAgainst), 0);

      switch(CC) {
        case ISD::CondCode::SETUGT: Opc = VideoCore4::JMP_CC_HI; break;
        case ISD::CondCode::SETUGE: Opc = VideoCore4::JMP_CC_HS; break;
        case ISD::CondCode::SETULT: Opc = VideoCore4::JMP_CC_LO; break;
        case ISD::CondCode::SETULE: Opc = VideoCore4::JMP_CC_LS; break;
        case ISD::CondCode::SETEQ: Opc = VideoCore4::JMP_CC_EQ; break;
        case ISD::CondCode::SETGT: Opc = VideoCore4::JMP_CC_GT; break;
        case ISD::CondCode::SETGE: Opc = VideoCore4::JMP_CC_GE; break;
        case ISD::CondCode::SETLT: Opc = VideoCore4::JMP_CC_LT; break;
        case ISD::CondCode::SETLE: Opc = VideoCore4::JMP_CC_LE; break;
        case ISD::CondCode::SETNE: Opc = VideoCore4::JMP_CC_NE; break;
        default: Opc = 0xFFFFFFFF;
      }

      if (Opc != 0xFFFFFFFF) {
        return CurDAG->SelectNodeTo(N, Opc, MVT::Other, Dest, Chain, Glue);
      }
    }
		default:
      break;
	}

  return SelectCode(N);
}

bool VideoCore4DAGToDAGISel::SelectStacked(SDValue addr, SDValue& base, SDValue& offset)
{
  DEBUG(errs() << "SelectStacke1d! " << "\n";);

  DEBUG(addr.dump());

	FrameIndexSDNode* FIN = dyn_cast<FrameIndexSDNode>(addr);
	if (FIN)
	{
		base = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i32);
		offset = CurDAG->getTargetConstant(0, MVT::i32);
		return true;
	}
	return false;
}

